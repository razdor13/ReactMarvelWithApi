{"version":3,"file":"static/js/440.2f53dc2a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMassage/ErrorMassage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import './comicsList.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\n\r\n\r\n\r\n\r\nconst ComicsList = () => {\r\n    const {error,loading,getComics}=useMarvelService()\r\n    const [comicsList, setComicsList] = useState([])\r\n    const [newItemLoading, setnewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n\r\n    useEffect(()=> {\r\n        onRequest(offset,true)\r\n        \r\n    },[])\r\n\r\n    const onRequest = (offset,initial) => {\r\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\r\n        getComics(offset)\r\n        .then(onComicsLoaded)\r\n        \r\n    }\r\n\r\n    const onComicsLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList])\r\n        setnewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset+8)\r\n        setComicsEnded(charEnded => ended);\r\n        \r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map((item,i)=> {\r\n            console.log(item.id)\r\n            return (\r\n                <li \r\n                className=\"comics__item\"\r\n                key={item.id}\r\n                >\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt=\"x-men\" className=\"comics__item-img\"/>\r\n                        <div className=\"comics__item-name\">{item.name}</div>\r\n                        <div className=\"comics__item-price\">NOT AVAILABLE</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n\r\n\r\n\r\n        })\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n    const items = renderItems(comicsList)\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                disabled={newItemLoading} \r\n                style={{'display' : comicsEnded ? 'none' : 'block'}}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import ComicsList from '../comicsList/ComicsList';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n\r\n","import { useHttp } from \"../hooks/http.hooks\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\t// const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// const _apikey = 'apikey=10877f709e567804be49abd6a4c6cbcd';\r\n\t// const _baseOffset = 210;\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n\tconst _apikey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n\tconst _baseOffset = 0;\r\n\r\n\tconst getAllComics = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacterByName = async(name) => {\r\n\t\tconst res = await request (\r\n\t\t\t`${_apiBase}characters?name=${name}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res =  await request(\r\n\t\t\t`${_apiBase}characters/${id}?${_apikey}`\r\n\t\t);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics/${id}?${_apikey}`\r\n\t\t)\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\t// let str = char.description;\r\n\t\t// if (str.length > 100) {\r\n\t\t// \tstr = str.slice(0, 220)+\"...\";\r\n\t\t// }\r\n\t\t// if (str.length === 0) {\r\n\t\t// \tstr = 'Description is not available for this character'\r\n\t\t// }\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? char.description.length > 200 ? char.description.slice (0, 200) +\"...\" :  char.description:  'Description is not available for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\treturn {\r\n\t\tloading, \r\n\t\terror, \r\n\t\tclearError,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacter, \r\n\t\tgetCharacterByName, \r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","error","loading","getComics","useMarvelService","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsLoaded","newComicsList","ended","length","charEnded","items","arr","map","item","i","console","log","id","Link","to","concat","thumbnail","name","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apikey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","results","getCharacter","res","getCharacterByName","getAllComics","getComic"],"sourceRoot":""}
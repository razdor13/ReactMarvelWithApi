{"version":3,"file":"static/js/432.95af7921.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMassage/ErrorMassage.js","components/pages/singlePage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {comicId} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n        useEffect(() => {\r\n            updateData()\r\n        }, [comicId])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(comicId).then(onDataLoaded);\r\n                    break;\r\n                case 'character':\r\n                    getCharacter(comicId).then(onDataLoaded);\r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n\r\n","import { useHttp } from \"../hooks/http.hooks\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\t// const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// const _apikey = 'apikey=10877f709e567804be49abd6a4c6cbcd';\r\n\t// const _baseOffset = 210;\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n\tconst _apikey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n\tconst _baseOffset = 0;\r\n\r\n\tconst getAllComics = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacterByName = async(name) => {\r\n\t\tconst res = await request (\r\n\t\t\t`${_apiBase}characters?name=${name}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res =  await request(\r\n\t\t\t`${_apiBase}characters/${id}?${_apikey}`\r\n\t\t);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics/${id}?${_apikey}`\r\n\t\t)\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\t// let str = char.description;\r\n\t\t// if (str.length > 100) {\r\n\t\t// \tstr = str.slice(0, 220)+\"...\";\r\n\t\t// }\r\n\t\t// if (str.length === 0) {\r\n\t\t// \tstr = 'Description is not available for this character'\r\n\t\t// }\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? char.description.length > 200 ? char.description.slice (0, 200) +\"...\" :  char.description:  'Description is not available for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\treturn {\r\n\t\tloading, \r\n\t\terror, \r\n\t\tclearError,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacter, \r\n\t\tgetCharacterByName, \r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","comicId","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apikey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics"],"sourceRoot":""}
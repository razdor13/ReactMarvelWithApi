{"version":3,"file":"static/js/512.e6a8bab0.chunk.js","mappings":"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","sources":["components/errorMassage/ErrorMassage.js","components/pages/SingleComicPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n    \r\n    useEffect(() => {\r\n        updateComic()\r\n        \r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        \r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language12312: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">1Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n\r\n","import { useHttp } from \"../hooks/http.hooks\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\t// const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// const _apikey = 'apikey=10877f709e567804be49abd6a4c6cbcd';\r\n\t// const _baseOffset = 210;\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n\tconst _apikey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n\tconst _baseOffset = 0;\r\n\r\n\tconst getAllComics = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacterByName = async(name) => {\r\n\t\tconst res = await request (\r\n\t\t\t`${_apiBase}characters?name=${name}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res =  await request(\r\n\t\t\t`${_apiBase}characters/${id}?${_apikey}`\r\n\t\t);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics/${id}?${_apikey}`\r\n\t\t)\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\t// let str = char.description;\r\n\t\t// if (str.length > 100) {\r\n\t\t// \tstr = str.slice(0, 220)+\"...\";\r\n\t\t// }\r\n\t\t// if (str.length === 0) {\r\n\t\t// \tstr = 'Description is not available for this character'\r\n\t\t// }\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? char.description.length > 200 ? char.description.slice (0, 200) +\"...\" :  char.description:  'Description is not available for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\treturn {\r\n\t\tloading, \r\n\t\terror, \r\n\t\tclearError,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacter, \r\n\t\tgetCharacterByName, \r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apikey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getCharacterByName","getAllComics"],"sourceRoot":""}
{"version":3,"file":"static/js/316.ebbbc380.chunk.js","mappings":"sLAEA,MAKA,EALqBA,KAEbC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,S,6JCIhI,MAsDMC,EAAOC,IAAa,IAAZ,KAACC,GAAKD,EAChB,MAAM,KAACE,EAAI,YAACC,EAAW,UAACC,EAAS,SAACC,EAAQ,KAACC,GAAQL,EAE7CM,GADwB,OAATH,QAAS,IAATA,OAAS,EAATA,EAAWI,SAAS,wBACA,CAACd,UAAW,WAAa,KAClE,OACIe,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC7BtB,EAAAA,EAAAA,KAAA,OAAKC,MAAOiB,EAAoBX,IAAKQ,EAAWN,IAAI,mBAAmBY,UAAU,qBAC1ED,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BtB,EAAAA,EAAAA,KAAA,KAAGqB,UAAU,mBAAkBC,SAAET,KACjCb,EAAAA,EAAAA,KAAA,KAAGqB,UAAU,oBAAmBC,SAC3BR,KAELM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BtB,EAAAA,EAAAA,KAAA,KAAGuB,KAAMP,EAAUK,UAAU,sBAAqBC,UAC9CtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,gBAE3BtB,EAAAA,EAAAA,KAAA,KAAGuB,KAAMN,EAAMI,UAAU,2BAA0BC,UAC/CtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,mBAIzC,EAGd,EA9EmBE,KACf,MAAOZ,EAAKa,IAAUC,EAAAA,EAAAA,UAAS,CAAC,IAC1B,QAACC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAcC,EAAAA,EAAAA,MAEnDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACd,IAGF,MAAMC,EAAgBtB,IAClBa,EAAQb,EAAK,EAMXqB,EAAaA,KACfH,IACA,MAAMK,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,UAAkC,OAC7DT,EAAaM,GACRI,KAAKL,GAENM,QAAQC,IAAI7B,EAAK,EAIf8B,EAAed,GAAO5B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAK,KACxC4C,EAAUhB,GAAS3B,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAK,KAChCC,EAAYlB,GAAWC,EAA+B,MAArB5B,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IACnD,OACIQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBoB,EACAC,EACAE,GACDzB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACFtB,EAAAA,EAAAA,KAAA,SAAK,6CAGpCA,EAAAA,EAAAA,KAAA,KAAGqB,UAAU,oBAAmBC,SAAC,2BAGjCtB,EAAAA,EAAAA,KAAA,UACAqB,UAAU,sBACVyB,QAASb,EAAWX,UAEhBtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,cAE3BtB,EAAAA,EAAAA,KAAA,OAAKO,IAAKwC,EAAStC,IAAI,UAAUY,UAAU,gCAE7C,EC8DlB,EAlHkB2B,IAEd,MAAOC,EAAUC,IAAexB,EAAAA,EAAAA,UAAS,KAClCyB,EAAgBC,IAAqB1B,EAAAA,EAAAA,WAAS,IAC9C2B,EAAQC,IAAa5B,EAAAA,EAAAA,UAAS,MAC9B6B,EAAWC,IAAgB9B,EAAAA,EAAAA,WAAS,IAErC,QAACC,EAAO,MAACC,EAAK,iBAAC6B,IAAoB1B,EAAAA,EAAAA,MAEzCC,EAAAA,EAAAA,YAAU,KACN0B,EAAUL,GAAO,EAAK,GAExB,IAKF,MAAMK,EAAYA,CAACL,EAAOM,KACbP,GAATO,GACAF,EAAiBJ,GAChBd,KAAKqB,EAAiB,EAIrBA,EAAoBC,IACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAEZZ,GAAYD,GAAY,IAAIA,KAAYY,KACxCT,GAAkBD,IAAkB,IACpCG,GAAUD,GAAUA,EAAO,IAC3BG,GAAaD,GAAaO,GAAM,EAI9BE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAe/B,IAOjB6B,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQhC,GAAImC,UAAUE,IAAI,uBACnCR,EAASG,QAAQhC,GAAIsC,OAAO,EA2C5B,MAAMC,EAtCV,SAAqBC,GACjB,MAAMD,EAASC,EAAIC,KAAI,CAACP,EAAKQ,KACzB,MACM3D,EADemD,EAAKtD,UAAUI,SAAS,uBACJ,CAACd,UAAW,QAAU,KAE/D,OACIe,EAAAA,EAAAA,MAAA,MACI0D,IAAKC,GAAIf,EAASG,QAAQU,GAAKE,EAC/B1D,UAAU,aAEVyB,QAASA,KACLE,EAAMgC,eAAeX,EAAKlC,IAC1B+B,EAAYW,EAAE,EAElBI,SAAU,EACVC,WAAaC,IACTA,EAAEC,iBACY,MAAVD,EAAEE,KAAyB,UAAVF,EAAEE,MACnBrC,EAAMgC,eAAeX,EAAKlC,IAC1B+B,EAAYW,GAChB,EACFvD,SAAA,EAEEtB,EAAAA,EAAAA,KAAA,OAAKO,IAAK8D,EAAKtD,UAAWN,IAAK4D,EAAKxD,KAAMZ,MAAOiB,KACjDlB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,aAAYC,SAAE+C,EAAKxD,SAfjCwD,EAAKlC,GAgBT,IAIb,OACInC,EAAAA,EAAAA,KAAA,MAAIqB,UAAU,aAAYC,SACrBoD,GAGb,CAIkBY,CAAYrC,GAEpBsC,EAAe3D,GAAQ5B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAK,KACzC4C,EAAUhB,IAAYwB,GAAiBnD,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAK,KAE1D,OACIxB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBiE,EACA5C,EACA+B,GACD1E,EAAAA,EAAAA,KAAA,UACAqB,UAAU,mCACVmE,SAAUrC,EACVlD,MAAO,CAACC,QAAUqD,EAAW,OAAS,SACtCT,QAASA,IAAKY,EAAUL,GAAQ/B,UAG5BtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,kBAEzB,EChGlB,EAjBiBmE,KAETrE,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACItB,EAAAA,EAAAA,KAAA,KAAGqB,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,4BACfrB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,6BAEnBrB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,2BACfrB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,2BACfrB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,gCCsCzBX,EAAOC,IAAa,IAAZ,KAACC,GAAKD,EAEhB,MAAM,KAACE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAE0E,GAAU/E,EAEzDM,EADiBH,EAAUI,SAAS,uBACD,CAACd,UAAW,QAAU,KAE/D,OACIe,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBtB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAKI,EAAMZ,MAAOiB,KACvCE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACItB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,kBAAiBC,SAAET,KAClCO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBtB,EAAAA,EAAAA,KAAA,KAAGuB,KAAMP,EAAUK,UAAU,sBAAqBC,UAC9CtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,gBAE3BtB,EAAAA,EAAAA,KAAA,KAAGuB,KAAMN,EAAMI,UAAU,2BAA0BC,UAC/CtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,qBAKvCtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,cAAaC,SACvBR,KAELd,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5BqE,EAAO5B,OAAS,EAAI,KAAO,oCAExB4B,EAAOf,KAAI,CAACP,EAAMQ,KAEd,KAAIA,EAAI,GACR,OACI7E,EAAAA,EAAAA,KAAA,MAAYqB,UAAU,oBAAmBC,SACpC+C,EAAKxD,MADDgE,EAEJ,SAKtB,EAIX,EAvFkB7B,IAEd,MAAOpC,EAAKa,IAAWC,EAAAA,EAAAA,UAAS,OAC1B,MAACE,EAAK,QAACD,EAAO,aAACE,EAAY,WAACC,IAAcC,EAAAA,EAAAA,MAEhDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACd,KAEFD,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACd,CAACe,EAAM4C,SAET,MAAM3D,EAAaA,KACf,MAAM,OAAC2D,GAAU5C,EACZ4C,IAGL9D,IACAD,EAAa+D,GACZrD,KAAKL,GAAa,EAGjBA,EAAgBtB,IAClBa,EAAQb,EAAK,EAGPiF,EAAWjF,GAAQe,GAAWC,EAAQ,MAAO5B,EAAAA,EAAAA,KAACyF,EAAQ,IACtDF,EAAe3D,GAAQ5B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAK,KACzC4C,EAAUhB,GAAU3B,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAK,KACjCC,EAAYlB,GAAWC,IAAUhB,EAA8B,MAAtBZ,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IAE3D,OACIQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBuE,EACAN,EACA5C,EACAE,IACC,EC3ClB,MAAMiD,UAAsBC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAClCC,MAAQ,CACJtE,OAAO,EACV,CAEDuE,iBAAAA,CAAkBvE,EAAOwE,GACrB5D,QAAQC,IAAIb,EAAOwE,GACnBC,KAAKC,SAAS,CACV1E,OAAO,GAEf,CAEA2E,MAAAA,GACI,OAAIF,KAAKH,MAAMtE,OACJ5B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAGjBsG,KAAKrD,MAAM1B,QACtB,EAGJ,U,8BCdA,MAgEA,EAhEuBkF,KACnB,MAAO5F,EAAMa,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,QAACC,EAAO,MAAEC,EAAK,mBAAE6E,EAAkB,WAAE3E,IAAcC,EAAAA,EAAAA,KAEnDG,EAAgBtB,IAClBa,EAAQb,EAAK,EAUX2E,EAAe3D,GAAQ5B,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,8BAA6BC,UAACtB,EAAAA,EAAAA,KAACD,EAAAA,EAAY,MAAY,KAC7F2G,EAAW9F,EAAcA,EAAKmD,OAAS,GAC7B3C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiBV,EAAK,GAAGC,KAAK,aACpEb,EAAAA,EAAAA,KAAC2G,EAAAA,GAAI,CAACC,GAAE,eAAAC,OAAiBjG,EAAK,GAAGuB,IAAMd,UAAU,2BAA0BC,UACvEtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,kBAG/BtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,qBAAoBC,SAAC,8DAP5B,KAWxB,OACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BtB,EAAAA,EAAAA,KAAC8G,EAAAA,GAAM,CACHC,cAAiB,CACbC,SAAU,IAEdC,iBAAoBC,EAAAA,GAAW,CAC3BF,SAAUE,EAAAA,KAAaC,SAAS,4BAEpCC,SAAazG,IAAiB,IAAhB,SAACqG,GAASrG,EA5BhBE,QA6BOmG,EA5BvBlF,IAEA2E,EAAmB5F,GACd0B,KAAKL,EAyBsB,EACtBZ,UAEFF,EAAAA,EAAAA,MAACiG,EAAAA,GAAI,CAAA/F,SAAA,EACDtB,EAAAA,EAAAA,KAAA,SAAOqB,UAAU,qBAAqBiG,QAAQ,WAAUhG,SAAC,kCACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCtB,EAAAA,EAAAA,KAACuH,EAAAA,GAAK,CACFpF,GAAG,WACHtB,KAAK,WACL2G,KAAK,OACLC,YAAY,gBAChBzH,EAAAA,EAAAA,KAAA,UACIwH,KAAK,SACLnG,UAAU,sBACVmE,SAAU7D,EAAQL,UAClBtB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,QAAOC,SAAC,eAG/BtB,EAAAA,EAAAA,KAAC0H,EAAAA,GAAkB,CAACC,UAAU,MAAMtG,UAAU,qBAAqBR,KAAK,kBAG/E6F,EACAnB,IACC,E,qDC/Bd,EA9BiBqC,KACb,MAAOC,EAAcpG,IAAWC,EAAAA,EAAAA,UAAS,MAMzC,OACIN,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACItB,EAAAA,EAAAA,KAAC8F,EAAa,CAAAxE,UACVtB,EAAAA,EAAAA,KAACwB,EAAU,OAEfJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BtB,EAAAA,EAAAA,KAAC8F,EAAa,CAAAxE,UACVtB,EAAAA,EAAAA,KAAC8H,EAAQ,CAAC9C,eAXF7C,IACpBV,EAAQU,EAAG,OAYHf,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACItB,EAAAA,EAAAA,KAAC8F,EAAa,CAAAxE,UACVtB,EAAAA,EAAAA,KAAC+H,EAAQ,CAACnC,OAAQiC,OAEtB7H,EAAAA,EAAAA,KAAC8F,EAAa,CAAAxE,UACVtB,EAAAA,EAAAA,KAACwG,EAAc,aAI3BxG,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,gBAAgBd,IAAKyH,EAAYvH,IAAI,aACrD,C,6CCjCJ,MCgGP,EA/FyBsB,KACxB,MAAM,QAACJ,EAAO,QAAEsG,EAAO,MAAErG,EAAK,WAAEE,GDFVoG,MACnB,MAAOvG,EAASwG,IAAczG,EAAAA,EAAAA,WAAS,IAChCE,EAAOwG,IAAY1G,EAAAA,EAAAA,UAAS,MA0BnC,MAAO,CAACC,UAASsG,SAxBDI,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMvC,UAAAlC,OAAA,QAAA0E,IAAAxC,UAAA,GAAAA,UAAA,GAAG,MAAOyC,EAAIzC,UAAAlC,OAAA,QAAA0E,IAAAxC,UAAA,GAAAA,UAAA,GAAG,KAAM0C,EAAO1C,UAAAlC,OAAA,QAAA0E,IAAAxC,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE5FkC,GAAW,GAEX,IACI,MAAMS,QAAiBC,MAAMN,EAAK,CAACC,SAAQE,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADlC,OAAoB0B,EAAG,cAAA1B,OAAa+B,EAASI,SAGhE,MAAMC,QAAaL,EAASM,OAG5B,OADAf,GAAW,GACJc,CACX,CAAE,MAAM9D,GAGJ,MAFAgD,GAAW,GACXC,EAASjD,EAAEgE,SACLhE,CACV,CACJ,GAAG,IAIuBvD,QAAOE,YAFduG,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAET,EC1BDF,GAMxCkB,EAAW,yCACXC,EAAU,0CAsCVC,EAAuB1I,IAQrB,CACNuB,GAAIvB,EAAKuB,GACTtB,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAcF,EAAKE,YAAYiD,OAAS,IAAMnD,EAAKE,YAAYyI,MAAO,EAAG,KAAM,MAAS3I,EAAKE,YAAc,kDAC7HC,UAAWH,EAAKG,UAAUyI,KAAO,IAAM5I,EAAKG,UAAU0I,UACtDzI,SAAUJ,EAAK8I,KAAK,GAAGnB,IACvBtH,KAAML,EAAK8I,KAAK,GAAGnB,IACnB5C,OAAQ/E,EAAK+E,OAAOjB,QAIhBiF,EAAoBhE,IAAY,IAADiE,EACpC,MAAO,CACNzH,GAAIwD,EAAOxD,GACX0H,MAAOlE,EAAOkE,MACd/I,YAAa6E,EAAO7E,aAAe,0BACnCgJ,UAAWnE,EAAOmE,UAAS,GAAAjD,OACrBlB,EAAOmE,UAAS,OACnB,2CACH/I,UAAW4E,EAAO5E,UAAUyI,KAAO,IAAM7D,EAAO5E,UAAU0I,UAC1DM,UAA+B,QAArBH,EAAAjE,EAAOqE,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAE7CE,MAAOtE,EAAOuE,OAAO,GAAGD,MAAK,GAAApD,OACvBlB,EAAOuE,OAAO,GAAGD,MAAK,KACzB,gBACH,EAEF,MAAO,CACNtI,UACAC,QACAE,aACA2B,iBAnEwB6E,iBAAgC,IAA1BjF,EAAM4C,UAAAlC,OAAA,QAAA0E,IAAAxC,UAAA,GAAAA,UAAA,GATjB,EAanB,aAHkBgC,EAAQ,GAADpB,OACrBuC,EAAQ,8BAAAvC,OAA6BxD,EAAM,KAAAwD,OAAIwC,KAExCJ,KAAKvC,QAAQ9B,IAAI0E,EAC7B,EA+DCzH,aAtDoByG,UACpB,MAAM6B,QAAalC,EAAQ,GAADpB,OACtBuC,EAAQ,eAAAvC,OAAc1E,EAAE,KAAA0E,OAAIwC,IAEhC,OAAOC,EAAoBa,EAAIlB,KAAKvC,QAAQ,GAAG,EAmD/CD,mBA9D0B6B,gBACRL,EAAO,GAAApB,OACrBuC,EAAQ,oBAAAvC,OAAmBhG,EAAI,KAAAgG,OAAIwC,KAE5BJ,KAAKvC,QAAQ9B,IAAI0E,GA2D5Bc,aA7EoB9B,iBAAgC,IAA1BjF,EAAM4C,UAAAlC,OAAA,QAAA0E,IAAAxC,UAAA,GAAAA,UAAA,GAFb,EAMnB,aAHkBgC,EAAQ,GAADpB,OACrBuC,EAAQ,8CAAAvC,OAA6CxD,EAAM,KAAAwD,OAAIwC,KAExDJ,KAAKvC,QAAQ9B,IAAI+E,EAC7B,EAyECU,SAlDgB/B,UAChB,MAAM6B,QAAYlC,EAAQ,GAADpB,OACrBuC,EAAQ,WAAAvC,OAAU1E,EAAE,KAAA0E,OAAIwC,IAE5B,OAAOM,EAAiBQ,EAAIlB,KAAKvC,QAAQ,GAAG,EA+C5C,C","sources":["components/errorMassage/ErrorMassage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import { useState,useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\n\r\nconst RandomChar = () => {\r\n    const [char,setChar]= useState({})\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n    \r\n    useEffect(()=>{\r\n        updateChar()\r\n    },[])\r\n    \r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    const updateChar = () => {\r\n        clearError()\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n            \r\n            console.log(char)\r\n    }\r\n\r\n    \r\n        const errorMassage = error? <ErrorMessage/> : null;\r\n        const spinner = loading? <Spinner/> : null\r\n        const content = !(loading || error ) ? <View char={char}/> :null;\r\n        return (\r\n            <div className=\"randomchar\">\r\n                {errorMassage}\r\n                {spinner}\r\n                {content}\r\n                <div className=\"randomchar__static\">\r\n                    <p className=\"randomchar__title\">\r\n                        Random character for today!<br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p className=\"randomchar__title\">\r\n                        Or choose another one\r\n                    </p>\r\n                    <button \r\n                    className=\"button button__main\"\r\n                    onClick={updateChar}\r\n                    >\r\n                        <div className=\"inner\">try it</div>\r\n                    </button>\r\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n}\r\nconst View = ({char}) => {\r\n    const {name,description,thumbnail,homepage,wiki} = char\r\n    const isWithoutImg = thumbnail?.includes(\"image_not_available\")\r\n    const letChangeObjectFit = isWithoutImg? {objectFit: 'contain'} : null\r\n    return(\r\n        <div className=\"randomchar__block\">\r\n             <img style={letChangeObjectFit} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n                    <div className=\"randomchar__info\">\r\n                        <p className=\"randomchar__name\">{name}</p>\r\n                        <p className=\"randomchar__descr\">\r\n                            {description}\r\n                        </p>\r\n                        <div className=\"randomchar__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n        </div>       \r\n    )\r\n}\r\nexport default RandomChar;","import {useEffect,useState,useRef} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {loading,error,getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset,true)\r\n        \r\n    },[])//useEffect з пустим масивом виконається (ініціалізується лише один раз)(заміна componentDidMount)\r\n        // також не дивлячись на те що ми запускаємо цю функцію  onRequest() перед ініцаілізацію\r\n        //вона стрілочна, суть в тому що useEffect всеодно запуститься після рендеру .\r\n\r\n\r\n    const onRequest = (offset,initial) => {\r\n        initial? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n        .then(onCharListLoaded)\r\n    };\r\n\r\n    \r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n        setCharList(charList => [...charList,...newCharList])\r\n        setNewItemLoading(newItemLoading => false)\r\n        setOffset(offset => offset+9)\r\n        setCharEnded(charEnded => ended)\r\n\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n   \r\n    const focusOnItem = (id) => {\r\n        // Я реалізував варіант трохи складніший, з класом і фокусом.\r\n        // Однак теоретично можна залишити лише фокус, і використовувати його в стилях замість класу.\r\n        // Насправді, рішення з CSS-класом можна зробити, витягнувши персонажа\r\n        // у окремий компонент. Але код буде більший, з'явиться новий стан\r\n        // і не факт, що ми виграємо в оптимізації за рахунок більшої кількості елементів.\r\n        // У разі можливості, не зловживайте рефами, використовуйте їх тільки у крайніх випадках.\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    // this method create for optimization\r\n    // to not put this contruction in render\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item,i) => {\r\n            const isWithoutImg = item.thumbnail.includes(\"image_not_available\")\r\n            const letChangeObjectFit = isWithoutImg? {objectFit: 'fill'} : null\r\n            \r\n            return (\r\n                <li \r\n                    ref={el=>itemRefs.current[i] = el}\r\n                    className=\"char__item\"\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    tabIndex={0}\r\n                    onKeyPress={(e) => {\r\n                        e.preventDefault()\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}\r\n                    >\r\n                        <img src={item.thumbnail} alt={item.name} style={letChangeObjectFit}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        // А эта конструкция вынесена для центровки спиннера/ошибки\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n        const items = renderItems(charList);\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {items}\r\n                <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{display : charEnded? 'none' : 'block'}}\r\n                onClick={()=> onRequest(offset)}\r\n                \r\n                >\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useEffect,useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char,setChar] = useState(null)\r\n    const {error,loading,getCharacter,clearError} = useMarvelService();\r\n    \r\n    useEffect(()=>{\r\n        updateChar()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        updateChar()\r\n    },[props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError()\r\n        getCharacter(charId)\r\n        .then(onCharLoaded)  \r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n        const skeleton = char || loading || error ? null : <Skeleton/>;\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n        \r\n        return (\r\n            <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nconst View = ({char}) => {\r\n    \r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n    const isWithoutImg =   thumbnail.includes(\"image_not_available\")\r\n    const letChangeObjectFit = isWithoutImg? {objectFit: 'fill'} : null\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={letChangeObjectFit}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMassage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMassage/ErrorMassage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import {useState} from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\"\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}\r\n\r\n","import { useHttp } from \"../hooks/http.hooks\"\r\n\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\t// const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// const _apikey = 'apikey=10877f709e567804be49abd6a4c6cbcd';\r\n\t// const _baseOffset = 210;\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n\tconst _apikey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n\tconst _baseOffset = 0;\r\n\r\n\tconst getAllComics = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getAllCharacters = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacterByName = async(name) => {\r\n\t\tconst res = await request (\r\n\t\t\t`${_apiBase}characters?name=${name}&${_apikey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res =  await request(\r\n\t\t\t`${_apiBase}characters/${id}?${_apikey}`\r\n\t\t);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics/${id}?${_apikey}`\r\n\t\t)\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\t// let str = char.description;\r\n\t\t// if (str.length > 100) {\r\n\t\t// \tstr = str.slice(0, 220)+\"...\";\r\n\t\t// }\r\n\t\t// if (str.length === 0) {\r\n\t\t// \tstr = 'Description is not available for this character'\r\n\t\t// }\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? char.description.length > 200 ? char.description.slice (0, 200) +\"...\" :  char.description:  'Description is not available for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\treturn {\r\n\t\tloading, \r\n\t\terror, \r\n\t\tclearError,\r\n\t\tgetAllCharacters, \r\n\t\tgetCharacter, \r\n\t\tgetCharacterByName, \r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","letChangeObjectFit","includes","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","console","log","errorMassage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","ref","el","onCharSelected","tabIndex","onKeyPress","e","preventDefault","key","renderItems","errorMessage","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apikey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}